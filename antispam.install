<?php
/**
 * @file
 * Requirements, schema and related hooks for the Antispam module.
 */

/**
 * Implements hook_requirement().
 */
function antispam_requirements($phase) {
  $t = get_t();

  if ($phase == 'runtime') {
    $provider = antispam_get_service_provider();

    if ($provider == AKISMET_SERVICE) {
      if (variable_get('antispam_wpapikey', '') == '') {
        $requirements['antispam_key'] = array(
          'title' => t('Akismet API key'),
          'value' => t('Not present'),
          'description' => t("Akismet spam protection service requires a <a href='!wpapikey'>Akismet API key</a> to function. Obtain a key by signing up for a free account at <a href='!akismet-com'>Akismet.com</a>, then enter the key on the <a href='!antispam-settings'>AntiSpam settings page</a>.",
          array(
            '!wpapikey' => url('http://akismet.com/signup/'),
            '!akismet-com' => url('http://akismet.com'),
            '!antispam-settings' => url('admin/config/spamprevention/antispam'),
          )),
          'severity' => REQUIREMENT_ERROR,
        );
        return $requirements;
      }
    }
    elseif ($provider == TYPEPAD_SERVICE) {
      if (variable_get('antispam_tpapikey', '') == '') {
        $requirements['antispam_key'] = array(
          'title' => t('TypePad AntiSpam API key'),
          'value' => t('Not present'),
          'description' => t("TypePad AntiSpam service requires a <a href='!tpapikey'>TypePad.com AntiSpam API key</a> to function. Obtain a key by signing up for a free account at <a href='!typepad-com'>Typepad.com</a>. Once you get a free account, visit the <a href='!tpapikey'>TypePad AntiSpam Service</a> and get your free TypePad AntiSpam API Key there, then enter the key on the <a href='!antispam-settings'>AntiSpam settings page</a>.",
          array(
            '!tpapikey' => url('http://antispam.typepad.com/info/get-api-key.html'),
            '!typepad-com' => url('http://typepad.com/connect/register'),
            '!antispam-settings' => url('admin/config/spamprevention/antispam'),
          )),
          'severity' => REQUIREMENT_ERROR,
        );
        return $requirements;
      }
    }
    elseif ($provider == DEFENSIO_SERVICE) {
      if (variable_get('antispam_deapikey', '') == '') {
        $requirements['antispam_key'] = array(
          'title' => t('Defensio AntiSpam API key'),
          'value' => t('Not present'),
          '#description' => t("Defensio spam protection service requires a <a href='!defensio-com'>Defensio API key</a> to function. Obtain a key by signing up for a free account at <a href='!defensio-key'>Defensio.com</a> and get your free Defensio API key there, then enter the key on the <a href='!antispam-settings'>AntiSpam settings page</a>.",
          array(
            '!defensio-com' => url('http://defensio.com/'),
            '!defensio-key' => url('http://defensio.com/signup/'),
            '!antispam-settings' => url('admin/config/spamprevention/antispam'),
          )),
          'severity' => REQUIREMENT_ERROR,
        );
        return $requirements;
      }
    }
  }
}

/**
 * Implements hook_schema().
 */
function antispam_schema() {
  $schema['antispam_spam_marks'] = array(
    'fields' => array(
      'content_type' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'content_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'spam_created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'signature' => array(
        'type' => 'varchar',
        'length' => 40,
        'not null' => FALSE,
        'default' => '',
      ),
      'spaminess' => array(
        'type' => 'float',
        'not null' => FALSE,
        'default' => 1,
      ),
      'judge' => array(
        'type' => 'varchar',
        'length' => 40,
        'not null' => FALSE,
        'default' => '',
      ),
    ),
    'unique key' => array(
      'content' => array('content_type', 'content_id'),
    ),
    'indexes' => array(
      'spam_created' => array('spam_created'),
      'hostname' => array('hostname'),
      'mail' => array('mail'),
    ),
  );
  $schema['antispam_moderator'] = array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'email_for' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('uid'),
    'indexes' => array(
      'email_for' => array('email_for'),
    ),
  );
  $schema['antispam_counter'] = array(
    'fields' => array(
      'id' => array(
        'description' => 'The record ID (unique number)',
        'type' => 'serial', // start from 1
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'date' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'provider' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'spam_detected' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'ham_detected' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'false_negative' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'false_positive' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
//function antispam_install() {
//}

/**
 * Implements hook_uninstall().
 */
function antispam_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'antispam%'");
  cache_clear_all('variables', 'cache');
}
